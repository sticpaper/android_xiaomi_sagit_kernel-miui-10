From 836f436ba260c201f2ceb1cdeaaae6b737cefcce Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Thu, 10 Jan 2019 22:52:23 +0900
Subject: [PATCH 286/420] f2fs: convert wakelock APIs to wakeup_source

Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
---
 fs/f2fs/gc.c | 13 ++++++-------
 fs/f2fs/gc.h |  4 ++--
 2 files changed, 8 insertions(+), 9 deletions(-)

diff --git a/fs/f2fs/gc.c b/fs/f2fs/gc.c
index 7ec49529f57e..4ac02941c78d 100644
--- a/fs/f2fs/gc.c
+++ b/fs/f2fs/gc.c
@@ -15,7 +15,6 @@
 #include <linux/freezer.h>
 #include <linux/fb.h>
 #include <linux/power_supply.h>
-#include <linux/wakelock.h>
 
 #include "f2fs.h"
 #include "node.h"
@@ -32,14 +31,14 @@ static inline void gc_set_wakelock(struct f2fs_sb_info *sbi,
 		struct f2fs_gc_kthread *gc_th, bool val)
 {
 	if (val) {
-		if (!wake_lock_active(&gc_th->gc_wakelock)) {
+		if (!gc_th->gc_wakelock.active) {
 			f2fs_info(sbi, "Catching wakelock for GC");
-			wake_lock(&gc_th->gc_wakelock);
+			__pm_stay_awake(&gc_th->gc_wakelock);
 		}
 	} else {
-		if (wake_lock_active(&gc_th->gc_wakelock)) {
+		if (gc_th->gc_wakelock.active) {
 			f2fs_info(sbi, "Unlocking wakelock for GC");
-			wake_unlock(&gc_th->gc_wakelock);
+			__pm_relax(&gc_th->gc_wakelock);
 		}
 	}
 }
@@ -190,7 +189,7 @@ int f2fs_start_gc_thread(struct f2fs_sb_info *sbi)
 
 	snprintf(buf, sizeof(buf), "f2fs_gc-%u:%u", MAJOR(dev), MINOR(dev));
 
-	wake_lock_init(&gc_th->gc_wakelock, WAKE_LOCK_SUSPEND, buf);
+	wakeup_source_init(&gc_th->gc_wakelock, buf);
 
 	sbi->gc_thread = gc_th;
 	init_waitqueue_head(&sbi->gc_thread->gc_wait_queue_head);
@@ -212,7 +211,7 @@ void f2fs_stop_gc_thread(struct f2fs_sb_info *sbi)
 	if (!gc_th)
 		return;
 	kthread_stop(gc_th->f2fs_gc_task);
-	wake_lock_destroy(&gc_th->gc_wakelock);
+	wakeup_source_trash(&gc_th->gc_wakelock);
 	kvfree(gc_th);
 	sbi->gc_mode = GC_NORMAL;
 	sbi->gc_thread = NULL;
diff --git a/fs/f2fs/gc.h b/fs/f2fs/gc.h
index fb6b15006651..a98ca66c09d1 100644
--- a/fs/f2fs/gc.h
+++ b/fs/f2fs/gc.h
@@ -5,7 +5,7 @@
  * Copyright (c) 2012 Samsung Electronics Co., Ltd.
  *             http://www.samsung.com/
  */
-#include <linux/wakelock.h>
+#include <linux/pm_wakeup.h>
 
 #define GC_THREAD_MIN_WB_PAGES		1	/*
 						 * a threshold to determine
@@ -27,7 +27,7 @@
 struct f2fs_gc_kthread {
 	struct task_struct *f2fs_gc_task;
 	wait_queue_head_t gc_wait_queue_head;
-	struct wake_lock gc_wakelock;
+	struct wakeup_source gc_wakelock;
 
 	/* for gc sleep time */
 	unsigned int urgent_sleep_time;
-- 
2.15.0

