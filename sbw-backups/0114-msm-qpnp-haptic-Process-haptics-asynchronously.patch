From dc6dc811e76df2c9526e3fab3519fc926d27766a Mon Sep 17 00:00:00 2001
From: Sultanxda <sultanxda@gmail.com>
Date: Tue, 2 Aug 2016 23:59:42 -0700
Subject: [PATCH 114/420] msm: qpnp-haptic: Process haptics asynchronously

Blocking the timed_output sysfs node due to mutex contention causes severe
device wake-up latency, as a process crucial to system resume writes to the
timed_output vibrator node every time the device is resumed via the
fingerprint reader (fingerprint reader triggers a haptic response on
success).

By processing haptics asynchronously via a worker, the timed_output sysfs
won't get stalled for long periods of time (>30ms), and thus the device
will consistently wake from sleep faster.

Change-Id: I248ff11b79482cea804252c199b4a8935ad45fc1
Signed-off-by: Sultanxda <sultanxda@gmail.com>
---
 drivers/soc/qcom/qpnp-haptic.c | 34 +++++++++++++++++++++++++++++-----
 1 file changed, 29 insertions(+), 5 deletions(-)

diff --git a/drivers/soc/qcom/qpnp-haptic.c b/drivers/soc/qcom/qpnp-haptic.c
index 4ca0edf24eed..064608fc81cf 100644
--- a/drivers/soc/qcom/qpnp-haptic.c
+++ b/drivers/soc/qcom/qpnp-haptic.c
@@ -355,6 +355,8 @@ struct qpnp_hap {
 	struct mutex			lock;
 	struct mutex			wf_lock;
 	spinlock_t			bus_lock;
+	spinlock_t			td_lock;
+	struct work_struct		td_work;
 	struct completion		completion;
 	enum qpnp_hap_mode		play_mode;
 	u32				misc_clk_trim_error_reg;
@@ -402,6 +404,7 @@ struct qpnp_hap {
 	bool				auto_mode;
 	bool				override_auto_mode_config;
 	bool				play_irq_en;
+	int				td_time_ms;
 };
 
 static struct qpnp_hap *ghap;
@@ -2226,14 +2229,20 @@ static int qpnp_hap_auto_mode_config(struct qpnp_hap *hap, int time_ms)
 	return 0;
 }
 
-/* enable interface from timed output class */
-static void qpnp_hap_td_enable(struct timed_output_dev *dev, int time_ms)
+static void qpnp_timed_enable_worker(struct work_struct *work)
 {
-	struct qpnp_hap *hap = container_of(dev, struct qpnp_hap,
-					 timed_dev);
-	bool state = !!time_ms;
+	struct qpnp_hap *hap = container_of(work, struct qpnp_hap,
+					 td_work);
+	bool state;
 	ktime_t rem;
 	int rc;
+	int time_ms;
+
+	spin_lock(&hap->td_lock);
+	time_ms = hap->td_time_ms;
+	spin_unlock(&hap->td_lock);
+
+	state = !!time_ms;
 
 	if (time_ms < 0)
 		return;
@@ -2287,6 +2296,19 @@ static void qpnp_hap_td_enable(struct timed_output_dev *dev, int time_ms)
 	schedule_work(&hap->work);
 }
 
+/* enable interface from timed output class */
+static void qpnp_hap_td_enable(struct timed_output_dev *dev, int time_ms)
+{
+	struct qpnp_hap *hap = container_of(dev, struct qpnp_hap,
+					 timed_dev);
+
+	spin_lock(&hap->td_lock);
+	hap->td_time_ms = time_ms;
+	spin_unlock(&hap->td_lock);
+
+	schedule_work(&hap->td_work);
+}
+
 /* play pwm bytes */
 int qpnp_hap_play_byte(u8 data, bool on)
 {
@@ -3023,9 +3045,11 @@ static int qpnp_haptic_probe(struct platform_device *pdev)
 
 	mutex_init(&hap->lock);
 	mutex_init(&hap->wf_lock);
+	spin_lock_init(&hap->td_lock);
 	INIT_WORK(&hap->work, qpnp_hap_worker);
 	INIT_DELAYED_WORK(&hap->sc_work, qpnp_handle_sc_irq);
 	init_completion(&hap->completion);
+	INIT_WORK(&hap->td_work, qpnp_timed_enable_worker);
 
 	hrtimer_init(&hap->hap_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	hap->hap_timer.function = qpnp_hap_timer;
-- 
2.15.0

