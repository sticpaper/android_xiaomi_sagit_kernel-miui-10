From 144a87fd73f456ddb33ee760d890c84110eaa42c Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Fri, 16 Aug 2019 22:58:58 +0900
Subject: [PATCH 300/420] f2fs: use a seperate mutex for setting wakelock

We tried locking a mutex under the same/locked mutex,
causing f2fs_stop_rapid_gc() to always deadlock.

Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
---
 fs/f2fs/gc.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/fs/f2fs/gc.c b/fs/f2fs/gc.c
index 133f0c04b60d..72e7b2fabcd2 100644
--- a/fs/f2fs/gc.c
+++ b/fs/f2fs/gc.c
@@ -26,6 +26,7 @@
 #define TRIGGER_RAPID_GC (!screen_on && power_supply_is_system_supplied())
 static bool screen_on = true;
 static LIST_HEAD(gc_sbi_list);
+static DEFINE_MUTEX(gc_wakelock_mutex);
 static DEFINE_MUTEX(gc_sbi_mutex);
 static struct wakeup_source gc_wakelock;
 
@@ -34,7 +35,7 @@ static inline void rapid_gc_set_wakelock(void)
 	struct f2fs_sb_info *sbi;
 	unsigned int set = 0;
 
-	mutex_lock(&gc_sbi_mutex);
+	mutex_lock(&gc_wakelock_mutex);
 	list_for_each_entry(sbi, &gc_sbi_list, list) {
 		set |= sbi->rapid_gc;
 	}
@@ -46,7 +47,7 @@ static inline void rapid_gc_set_wakelock(void)
 		pr_info("F2FS-fs: Unlocking wakelock for rapid GC");
 		__pm_relax(&gc_wakelock);
 	}
-	mutex_unlock(&gc_sbi_mutex);
+	mutex_unlock(&gc_wakelock_mutex);
 }
 
 static int gc_thread_func(void *data)
-- 
2.15.0

