From d37ccd60800745ecd0fb50580bb3ca970e8ad44d Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Fri, 9 Aug 2019 21:59:59 +0900
Subject: [PATCH 297/420] f2fs: improve naming schemes for rapid GC

Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
---
 fs/f2fs/f2fs.h  |  4 +--
 fs/f2fs/gc.c    | 91 ++++++++++++++++++++++++++++-----------------------------
 fs/f2fs/super.c |  6 ++--
 3 files changed, 50 insertions(+), 51 deletions(-)

diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
index 0767d5c8f330..2e15362e7aec 100644
--- a/fs/f2fs/f2fs.h
+++ b/fs/f2fs/f2fs.h
@@ -3309,8 +3309,8 @@ void f2fs_clear_radix_tree_dirty_tag(struct page *page);
  */
 int f2fs_start_gc_thread(struct f2fs_sb_info *sbi);
 void f2fs_stop_gc_thread(struct f2fs_sb_info *sbi);
-void f2fs_sbi_list_add(struct f2fs_sb_info *sbi);
-void f2fs_sbi_list_del(struct f2fs_sb_info *sbi);
+void f2fs_gc_sbi_list_add(struct f2fs_sb_info *sbi);
+void f2fs_gc_sbi_list_del(struct f2fs_sb_info *sbi);
 
 block_t f2fs_start_bidx_of_node(unsigned int node_ofs, struct inode *inode);
 int f2fs_gc(struct f2fs_sb_info *sbi, bool sync, bool background,
diff --git a/fs/f2fs/gc.c b/fs/f2fs/gc.c
index 3d5dc4483636..1bc810eb005f 100644
--- a/fs/f2fs/gc.c
+++ b/fs/f2fs/gc.c
@@ -22,22 +22,20 @@
 #include "gc.h"
 #include <trace/events/f2fs.h>
 
-#define TRIGGER_SOFF (!screen_on && power_supply_is_system_supplied())
+#define TRIGGER_RAPID_GC (!screen_on && power_supply_is_system_supplied())
 static bool screen_on = true;
-// Use 1 instead of 0 to allow thread interrupts
-#define SOFF_WAIT_MS 1
 
-static inline void gc_set_wakelock(struct f2fs_sb_info *sbi,
+static inline void rapid_gc_set_wakelock(struct f2fs_sb_info *sbi,
 		struct f2fs_gc_kthread *gc_th, bool val)
 {
 	if (val) {
 		if (!gc_th->gc_wakelock.active) {
-			f2fs_info(sbi, "Catching wakelock for GC");
+			f2fs_info(sbi, "Catching wakelock for rapid GC");
 			__pm_stay_awake(&gc_th->gc_wakelock);
 		}
 	} else {
 		if (gc_th->gc_wakelock.active) {
-			f2fs_info(sbi, "Unlocking wakelock for GC");
+			f2fs_info(sbi, "Unlocking wakelock for rapid GC");
 			__pm_relax(&gc_th->gc_wakelock);
 		}
 	}
@@ -49,7 +47,7 @@ static int gc_thread_func(void *data)
 	struct f2fs_gc_kthread *gc_th = sbi->gc_thread;
 	wait_queue_head_t *wq = &sbi->gc_thread->gc_wait_queue_head;
 	unsigned int wait_ms = gc_th->min_sleep_time;
-	bool force_gc;
+	bool rapid_gc;
 
 	set_freezable();
 	do {
@@ -58,13 +56,14 @@ static int gc_thread_func(void *data)
 				gc_th->gc_wake,
 				msecs_to_jiffies(wait_ms));
 
-		force_gc = TRIGGER_SOFF;
-		if (force_gc) {
-			gc_set_wakelock(sbi, gc_th, true);
-			wait_ms = SOFF_WAIT_MS;
+		rapid_gc = TRIGGER_RAPID_GC;
+		if (rapid_gc) {
+			rapid_gc_set_wakelock(sbi, gc_th, true);
+			// Use 1 instead of 0 to allow thread interrupts
+			wait_ms = 1;
 			sbi->gc_mode = GC_URGENT;
 		} else {
-			gc_set_wakelock(sbi, gc_th, false);
+			rapid_gc_set_wakelock(sbi, gc_th, false);
 			wait_ms = gc_th->min_sleep_time;
 			sbi->gc_mode = GC_NORMAL;
 		}
@@ -81,7 +80,7 @@ static int gc_thread_func(void *data)
 			break;
 
 		if (sbi->sb->s_writers.frozen >= SB_FREEZE_WRITE) {
-			if (!force_gc) {
+			if (!rapid_gc) {
 				increase_sleep_time(gc_th, &wait_ms);
 				stat_other_skip_bggc_count(sbi);
 			}
@@ -111,8 +110,8 @@ static int gc_thread_func(void *data)
 		 * invalidated soon after by user update or deletion.
 		 * So, I'd like to wait some time to collect dirty segments.
 		 */
-		if (sbi->gc_mode == GC_URGENT || force_gc) {
-			if (!force_gc)
+		if (sbi->gc_mode == GC_URGENT || rapid_gc) {
+			if (!rapid_gc)
 				wait_ms = gc_th->urgent_sleep_time;
 			down_write(&sbi->gc_lock);
 			goto do_gc;
@@ -138,12 +137,12 @@ do_gc:
 		stat_inc_bggc_count(sbi->stat_info);
 
 		/* if return value is not zero, no victim was selected */
-		if (f2fs_gc(sbi, force_gc || test_opt(sbi, FORCE_FG_GC), true, NULL_SEGNO)) {
+		if (f2fs_gc(sbi, rapid_gc || test_opt(sbi, FORCE_FG_GC), true, NULL_SEGNO)) {
 			wait_ms = gc_th->no_gc_sleep_time;
-			gc_set_wakelock(sbi, gc_th, false);
+			rapid_gc_set_wakelock(sbi, gc_th, false);
 			sbi->gc_mode = GC_NORMAL;
 			f2fs_info(sbi,
-				"No more GC victim found, "
+				"No more rapid GC victim found, "
 				"sleeping for %u ms", wait_ms);
 
 			/*
@@ -220,18 +219,18 @@ void f2fs_stop_gc_thread(struct f2fs_sb_info *sbi)
 	sbi->gc_thread = NULL;
 }
 
-static LIST_HEAD(f2fs_sbi_list);
-static DEFINE_MUTEX(f2fs_sbi_mutex);
+static LIST_HEAD(gc_sbi_list);
+static DEFINE_MUTEX(gc_sbi_mutex);
 /* Trigger rapid GC when invalid block is higher than 3% */
 #define RAPID_GC_LIMIT_INVALID_BLOCK 3
 
-static void f2fs_start_all_gc_threads(void)
+static void f2fs_start_rapid_gc(void)
 {
 	struct f2fs_sb_info *sbi;
 	block_t invalid_blocks;
 
-	mutex_lock(&f2fs_sbi_mutex);
-	list_for_each_entry(sbi, &f2fs_sbi_list, list) {
+	mutex_lock(&gc_sbi_mutex);
+	list_for_each_entry(sbi, &gc_sbi_list, list) {
 		invalid_blocks = sbi->user_block_count -
 					written_block_count(sbi) -
 					free_user_blocks(sbi);
@@ -244,7 +243,7 @@ static void f2fs_start_all_gc_threads(void)
 			wake_up_discard_thread(sbi, true);
 		} else {
 			f2fs_info(sbi,
-					"Invalid blocks lower than %d%%,"
+					"Invalid blocks lower than %d%%, "
 					"skipping rapid GC (%u / (%u - %u))",
 					RAPID_GC_LIMIT_INVALID_BLOCK,
 					invalid_blocks,
@@ -252,47 +251,47 @@ static void f2fs_start_all_gc_threads(void)
 					written_block_count(sbi));
 		}
 	}
-	mutex_unlock(&f2fs_sbi_mutex);
+	mutex_unlock(&gc_sbi_mutex);
 }
 
-static void f2fs_stop_all_gc_threads(void)
+static void f2fs_stop_rapid_gc(void)
 {
 	struct f2fs_sb_info *sbi;
 
-	mutex_lock(&f2fs_sbi_mutex);
-	list_for_each_entry(sbi, &f2fs_sbi_list, list) {
+	mutex_lock(&gc_sbi_mutex);
+	list_for_each_entry(sbi, &gc_sbi_list, list) {
 		f2fs_stop_gc_thread(sbi);
 	}
-	mutex_unlock(&f2fs_sbi_mutex);
+	mutex_unlock(&gc_sbi_mutex);
 }
 
-void f2fs_sbi_list_add(struct f2fs_sb_info *sbi)
+void f2fs_gc_sbi_list_add(struct f2fs_sb_info *sbi)
 {
-	mutex_lock(&f2fs_sbi_mutex);
-	list_add_tail(&sbi->list, &f2fs_sbi_list);
-	mutex_unlock(&f2fs_sbi_mutex);
+	mutex_lock(&gc_sbi_mutex);
+	list_add_tail(&sbi->list, &gc_sbi_list);
+	mutex_unlock(&gc_sbi_mutex);
 }
 
-void f2fs_sbi_list_del(struct f2fs_sb_info *sbi)
+void f2fs_gc_sbi_list_del(struct f2fs_sb_info *sbi)
 {
-	mutex_lock(&f2fs_sbi_mutex);
+	mutex_lock(&gc_sbi_mutex);
 	list_del(&sbi->list);
-	mutex_unlock(&f2fs_sbi_mutex);
+	mutex_unlock(&gc_sbi_mutex);
 }
 
-static struct work_struct f2fs_gc_fb_worker;
-static void f2fs_gc_fb_work(struct work_struct *work)
+static struct work_struct rapid_gc_fb_worker;
+static void rapid_gc_fb_work(struct work_struct *work)
 {
 	if (screen_on) {
-		f2fs_stop_all_gc_threads();
+		f2fs_stop_rapid_gc();
 	} else {
 		/*
 		 * Start all GC threads exclusively from here
 		 * since the phone screen would turn on when
 		 * a charger is connected
 		 */
-		if (TRIGGER_SOFF)
-			f2fs_start_all_gc_threads();
+		if (TRIGGER_RAPID_GC)
+			f2fs_start_rapid_gc();
 	}
 }
 
@@ -308,11 +307,11 @@ static int fb_notifier_callback(struct notifier_block *self,
 		switch (*blank) {
 		case FB_BLANK_POWERDOWN:
 			screen_on = false;
-			queue_work(system_power_efficient_wq, &f2fs_gc_fb_worker);
+			queue_work(system_power_efficient_wq, &rapid_gc_fb_worker);
 			break;
 		case FB_BLANK_UNBLANK:
 			screen_on = true;
-			queue_work(system_power_efficient_wq, &f2fs_gc_fb_worker);
+			queue_work(system_power_efficient_wq, &rapid_gc_fb_worker);
 			break;
 		}
 	}
@@ -324,14 +323,14 @@ static struct notifier_block fb_notifier_block = {
 	.notifier_call = fb_notifier_callback,
 };
 
-static int __init f2fs_gc_register_fb(void)
+static int __init f2fs_rapid_gc_register_fb(void)
 {
-	INIT_WORK(&f2fs_gc_fb_worker, f2fs_gc_fb_work);
+	INIT_WORK(&rapid_gc_fb_worker, rapid_gc_fb_work);
 	fb_register_client(&fb_notifier_block);
 
 	return 0;
 }
-late_initcall(f2fs_gc_register_fb);
+late_initcall(f2fs_rapid_gc_register_fb);
 
 static int select_gc_type(struct f2fs_sb_info *sbi, int gc_type)
 {
diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
index d8543cfd04b4..be6f3a7be09d 100644
--- a/fs/f2fs/super.c
+++ b/fs/f2fs/super.c
@@ -1082,7 +1082,7 @@ static void f2fs_put_super(struct super_block *sb)
 	 * above failed with error.
 	 */
 	f2fs_destroy_stats(sbi);
-	f2fs_sbi_list_del(sbi);
+	f2fs_gc_sbi_list_del(sbi);
 
 	/* destroy f2fs internal modules */
 	f2fs_destroy_node_manager(sbi);
@@ -3377,7 +3377,7 @@ try_onemore:
 		goto free_stats;
 	}
 
-	f2fs_sbi_list_add(sbi);
+	f2fs_gc_sbi_list_add(sbi);
 
 	/* read root inode and dentry */
 	root = f2fs_iget(sb, F2FS_ROOT_INO(sbi));
@@ -3531,7 +3531,7 @@ free_node_inode:
 	iput(sbi->node_inode);
 	sbi->node_inode = NULL;
 free_stats:
-	f2fs_sbi_list_del(sbi);
+	f2fs_gc_sbi_list_del(sbi);
 	f2fs_destroy_stats(sbi);
 free_nm:
 	f2fs_destroy_node_manager(sbi);
-- 
2.15.0

